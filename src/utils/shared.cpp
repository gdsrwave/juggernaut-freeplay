// Copyright 2025 GDSRWave
#include <fmt/core.h>
#include <Geode/cocos/platform/CCFileUtils.h>
#include <Geode/cocos/support/zip_support/ZipUtils.h>
#include <cmath>
#include <filesystem>
#include <map>
#include <random>
#include <string>
#include <vector>
#include <Geode/Geode.hpp>
#include <Geode/ui/BasedButtonSprite.hpp>
#include <Geode/binding/LocalLevelManager.hpp>
#include <Geode/ui/GeodeUI.hpp>
#include <Geode/utils/cocos.hpp>
#include <Geode/utils/file.hpp>
#include "shared.hpp"

using namespace geode::prelude;

GJGameLevel* commonLevel = nullptr;

void setupJFPMusic() {
    std::string appdataDir = std::string(CCFileUtils::sharedFileUtils()->getWritablePath());
    std::filesystem::path srcPath = Mod::get()->getResourcesDir() / "jfpLoop.mp3";
    std::string dstPath = appdataDir + "jfpLoop.mp3";
    if (!std::filesystem::exists(dstPath)) {
        std::filesystem::copy_file(srcPath, dstPath);
        log::info("Copied JFP loop: {}", dstPath);
    }
}

std::vector<int> getUserSongs() {
    std::string appdataDir = std::string(CCFileUtils::sharedFileUtils()->getWritablePath());
    std::vector<int> res;
    for (const auto& entry : std::filesystem::directory_iterator(appdataDir)) {
        if (entry.is_regular_file()) {
            auto filename = entry.path().filename().string();
            if (filename.size() > 4 && filename.substr(filename.size() - 4) == ".mp3") {
                std::string numPart = filename.substr(0, filename.size() - 4);
                int num = geode::utils::numFromString<int>(numPart).unwrapOr(-1);
                if (num > -1) res.push_back(num);
            }
        }
    }
    return res;
}

void setupJFPDirectories(bool bypass) {
    auto localPath = CCFileUtils::sharedFileUtils();
    std::string jfpDir = std::string(localPath->getWritablePath()) + "jfp\\";
    if (!std::filesystem::is_directory(jfpDir)) {
        log::info("Creating JFP directory: {}", jfpDir);
        (void)file::createDirectory(jfpDir);
    }
    std::string themesDir = std::string(localPath->getWritablePath()) + "jfp\\themes\\";

    bool contFlag = bypass;
    if (!std::filesystem::is_directory(themesDir)) {
        (void)file::createDirectory(themesDir);
        contFlag = true;
    }
    if (contFlag) {
        log::info("Loading .jfpt files into themes directory: {}", themesDir);
        // Source directory for .jfpt files
        std::filesystem::path srcDir = Mod::get()->getResourcesDir();

        for (const auto& fileName : std::filesystem::directory_iterator(srcDir)) {
            auto fileStr = fileName.path().filename().string();
            if (fileStr.size() >= 5 && fileStr.substr(fileStr.size() - 5) == ".jfpt") {
                std::filesystem::path srcPath = srcDir / fileStr;
                std::string dstPath = themesDir + fileStr;

                if (std::filesystem::exists(dstPath)) {
                    if (bypass) {
                        std::filesystem::copy_file(
                            srcPath, dstPath,
                            std::filesystem::copy_options::overwrite_existing);
                        log::info("Overwrote existing theme file: {}", dstPath);
                    } else {
                        log::info("Theme file already exists and bypass is false: {}",
                            dstPath);
                    }
                } else if (std::filesystem::copy_file(srcPath, dstPath)) {
                    log::info("Copied theme file: {}", dstPath);
                } else {
                    log::error("Failed to copy theme file {}", dstPath);
                }
            }
        }
    }
}

#ifndef JFP_CONSTANTS_CPP
#define JFP_CONSTANTS_CPP

const int jfpSoundtrack[] = {
    614361,
    569208,
    678606,
    592012,
    109650,
    595394,
    85046,
    112527,
    169589,
    32207,
    64842,
    306254,
    386900,
    167229,
    895761,
    620959,
    431573,
    623104,
    349494,
    91656,
    574484,
    575665,
    467267,
    575341,
    490203,
    510853,
    835420,
    741034,
    830628,
    436814,
    485978,
    505813,
    621166,
    813526,
    723722,
    591740,
    638150,
    557651,
    286138,
    581444,
    223469,
    621144,
    739358,
    495840,
    516709,
    234565,
    590533,
    76743,
    378965,
    691180,
    465909,
    117474,
    459080,
    513917,
    622111,
    564162,
    498828,
    530913,
    489111,
    1126156,
    383158,
    648035,
    32772,
    656428,
    469490,
    579560,
    472169,
    675129,
    586990,
    561277,
    114114,
    347865,
    718319,
    718171,
    469968,
    771738,
    666666,
    829777,
    739991,
    905110,
    709578,
    219635,
    764913,
    163061,
    333082,
    659843,
    323384,
    278217,
    645631,
    258437,
    98933,
    465681,
    31214,
    99641,
    478283,
    36355,
    797578,
    614354,
    28549,
    353593,
    141262,
    343707,
    778652,
    393342,
    137492,
    685686,
    616845,
    63082,
    233860,
    598349,
    437224
};
const int jfpSoundtrackSize = sizeof(jfpSoundtrack) / sizeof(int);

namespace JFPGen {

const char* levelCommonBaseSeg = "1,660,2,255,3,163,6,17,13,0,64,1,67,1;1,1007,2,-15,3,285,20,1,36,1,51,902,10,1.57,35,0.9,64,1,67,1;1,1007,2,-15,3,315,20,1,36,1,51,903,10,0.0,35,0,64,1,67,1;1,1007,2,-15,3,345,20,1,36,1,51,904,10,0.0,35,0.5,64,1,67,1;";
const char* levelBaseSeg = "1,747,2,15,3,15,54,160,116,1;1,7,2,15,3,105,6,-90,21,1004,64,1,67,1;1,5,2,15,3,75,21,1004,64,1,67,1;1,5,2,15,3,45,21,1004,64,1,67,1;1,5,2,15,3,15,21,1004,64,1,67,1;1,7,2,45,3,105,6,-90,21,1004,64,1,67,1;1,5,2,45,3,15,21,1004,64,1,67,1;1,5,2,45,3,45,21,1004,64,1,67,1;1,5,2,45,3,75,21,1004,64,1,67,1;1,7,2,75,3,105,6,-90,21,1004,64,1,67,1;1,5,2,75,3,15,21,1004,64,1,67,1;1,5,2,75,3,75,21,1004,64,1,67,1;1,5,2,75,3,45,21,1004,64,1,67,1;1,7,2,195,3,15,21,1004,64,1,67,1;1,5,2,105,3,75,21,1004,64,1,67,1;1,5,2,105,3,15,21,1004,64,1,67,1;1,7,2,105,3,105,6,-90,21,1004,64,1,67,1;1,5,2,165,3,75;1,5,2,105,3,45,21,1004,64,1,67,1;1,103,2,165,3,129,64,1,67,1;1,5,2,135,3,75,21,1004,64,1,67,1;1,5,2,135,3,45,21,1004,64,1,67,1;1,5,2,135,3,15,21,1004,64,1,67,1;1,8,2,195,3,135,64,1,67,1;1,5,2,165,3,15,21,1004,64,1,67,1;1,5,2,165,3,45,21,1004,64,1,67,1;1,7,2,135,3,105,6,-90,21,1004,64,1,67,1;1,7,2,165,3,105,6,-90,64,1,67,1;1,1,2,195,3,105,64,1,67,1;1,7,2,195,3,75,64,1,67,1;1,7,2,195,3,45,21,1004,64,1,67,1;";

const char* levelStartingBase = "1,1338,2,255,3,45,64,1,67,1;1,1338,2,225,3,15,64,1,67,1;1,1338,2,285,3,{ch_1},6,270,64,1,67,1;1,1338,2,285,3,75,64,1,67,1;1,1338,2,345,3,{ch_2},6,270,64,1,67,1;1,1338,2,345,3,135,64,1,67,1;1,1338,2,315,3,105,64,1,67,1;1,1338,2,315,3,{ch_3},6,270,64,1,67,1;1,1338,2,255,3,{ch_4},6,270,64,1,67,1;1,1338,2,225,3,{ch_5},6,270,64,1,67,1;";

const char* levelStartingBase2 = "1,1339,2,315,3,30,5,1,6,90,64,1,67,1;1,1339,2,315,3,{ch_1},4,1,5,1,6,90,64,1,67,1;1,1339,2,285,3,{ch_2},4,1,5,1,6,90,64,1,67,1;1,1339,2,255,3,{ch_3},4,1,5,1,6,90,64,1,67,1;";

const char* lowVis = "1,901,2,300,3,285,20,2,36,1,51,903,28,0,29,0,10,1000,30,0,85,2,58,1;1,1011,2,495,3,150,20,2,57,903,64,1,67,1,6,-90,21,1010,24,9,32,2;1,1011,2,495,3,210,20,2,57,903,64,1,67,1,6,-90,21,1010,24,9,32,2;1,1011,2,495,3,30,20,2,57,903,64,1,67,1,6,-90,21,1010,24,9,32,2;1,1011,2,495,3,90,20,2,57,903,64,1,67,1,6,-90,21,1010,24,9,32,2;1,1011,2,495,3,270,20,2,57,903,64,1,67,1,6,-90,21,1010,24,9,32,2;1,211,2,600,3,225,20,2,57,903,64,1,67,1,21,1010,24,9,32,5;1,211,2,600,3,75,20,2,57,903,64,1,67,1,21,1010,24,9,32,5;1,1007,2,645,3,315,20,2,36,1,51,903,10,1.01,35,1;1,211,2,750,3,75,20,2,57,903,64,1,67,1,21,1010,24,9,32,5;1,211,2,750,3,225,20,2,57,903,64,1,67,1,21,1010,24,9,32,5;1,211,2,900,3,225,20,2,57,903,64,1,67,1,21,1010,24,9,32,5;1,211,2,900,3,75,20,2,57,903,64,1,67,1,21,1010,24,9,32,5;";

const char* finishLine = "1,211,2,{pos2},3,7.50015,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,7.50015,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,22.5,4,1,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,22.5,4,1,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,37.5,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,37.5,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,262.5,4,1,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,277.5,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,277.5,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,52.4999,4,1,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,67.4999,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,82.5001,4,1,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,67.4999,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,82.5001,4,1,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,97.4998,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,112.5,4,1,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,97.4998,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,112.5,4,1,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,127.5,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,127.5,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,142.5,4,1,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,52.4999,4,1,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,142.5,4,1,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,292.5,4,1,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,157.5,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,157.5,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,172.5,4,1,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,172.5,4,1,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,187.5,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,187.5,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,202.5,4,1,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,202.5,4,1,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,217.5,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,217.5,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,232.5,4,1,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,232.5,4,1,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,247.5,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,247.5,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;1,211,2,{pos2},3,262.5,4,1,20,1,57,904,25,-8,21,1010,24,9,128,0.5,129,0.5;1,211,2,{pos1},3,292.5,4,1,20,1,57,904,25,-8,21,1011,24,9,128,0.5,129,0.5;";

}

const std::map<std::string, std::string> defaultKbank = {
    {"kA13", "0"},
    {"kA15", "0"},
    {"kA16", "0"},
    {"kA14", ""},
    {"kA6", "0"},
    {"kA7", "7"},
    {"kA25", "0"},
    {"kA17", "0"},
    {"kA18", "0"},
    {"kS39", "0"},
    {"kA2", "0"},
    {"kA3", "0"},
    {"kA8", "0"},
    {"kA4", "1"},
    {"kA9", "0"},
    {"kA10", "0"},
    {"kA22", "0"},
    {"kA23", "0"},
    {"kA24", "0"},
    {"kA27", "0"},
    {"kA40", "0"},
    {"kA41", "0"},
    {"kA42", "0"},
    {"kA28", "0"},
    {"kA29", "0"},
    {"kA31", "0"},
    {"kA32", "0"},
    {"kA36", "0"},
    {"kA43", "0"},
    {"kA44", "0"},
    {"kA45", "0"},
    {"kA46", "0"},
    {"kA33", "0"},
    {"kA34", "0"},
    {"kA35", "0"},
    {"kA37", "0"},
    {"kA38", "0"},
    {"kA39", "0"},
    {"kA19", "0"},
    {"kA26", "0"},
    {"kA20", "0"},
    {"kA21", "0"},
    {"kA11", "0"}
};

#endif  // JFP_CONSTANTS_CPP
